# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:35:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ApiKeySourceType(Enum):
    HEADER = 'HEADER'
    AUTHORIZER = 'AUTHORIZER'


class ApiKeysFormat(Enum):
    csv = 'csv'


class AuthorizerType(Enum):
    TOKEN = 'TOKEN'
    REQUEST = 'REQUEST'
    COGNITO_USER_POOLS = 'COGNITO_USER_POOLS'


class BadRequestException(RootModel[Any]):
    root: Any


class Blob(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class CacheClusterSize(Enum):
    field_0_5 = '0.5'
    field_1_6 = '1.6'
    field_6_1 = '6.1'
    field_13_5 = '13.5'
    field_28_4 = '28.4'
    field_58_2 = '58.2'
    field_118 = '118'
    field_237 = '237'


class CacheClusterStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    AVAILABLE = 'AVAILABLE'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    NOT_AVAILABLE = 'NOT_AVAILABLE'
    FLUSH_IN_PROGRESS = 'FLUSH_IN_PROGRESS'


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionType(Enum):
    INTERNET = 'INTERNET'
    VPC_LINK = 'VPC_LINK'


class ContentHandlingStrategy(Enum):
    CONVERT_TO_BINARY = 'CONVERT_TO_BINARY'
    CONVERT_TO_TEXT = 'CONVERT_TO_TEXT'


class DeleteApiKeyRequest(BaseModel):
    pass


class DeleteAuthorizerRequest(BaseModel):
    pass


class DeleteBasePathMappingRequest(BaseModel):
    pass


class DeleteClientCertificateRequest(BaseModel):
    pass


class DeleteDeploymentRequest(BaseModel):
    pass


class DeleteDocumentationPartRequest(BaseModel):
    pass


class DeleteDocumentationVersionRequest(BaseModel):
    pass


class DeleteDomainNameRequest(BaseModel):
    pass


class DeleteGatewayResponseRequest(BaseModel):
    pass


class DeleteIntegrationRequest(BaseModel):
    pass


class DeleteIntegrationResponseRequest(BaseModel):
    pass


class DeleteMethodRequest(BaseModel):
    pass


class DeleteMethodResponseRequest(BaseModel):
    pass


class DeleteModelRequest(BaseModel):
    pass


class DeleteRequestValidatorRequest(BaseModel):
    pass


class DeleteResourceRequest(BaseModel):
    pass


class DeleteRestApiRequest(BaseModel):
    pass


class DeleteStageRequest(BaseModel):
    pass


class DeleteUsagePlanKeyRequest(BaseModel):
    pass


class DeleteUsagePlanRequest(BaseModel):
    pass


class DeleteVpcLinkRequest(BaseModel):
    pass


class DocumentationPartLocationStatusCode(
    RootModel[constr(pattern=r'^([1-5]\d\d|\*|\s*)$')]
):
    root: constr(pattern=r'^([1-5]\d\d|\*|\s*)$')


class DocumentationPartType(Enum):
    API = 'API'
    AUTHORIZER = 'AUTHORIZER'
    MODEL = 'MODEL'
    RESOURCE = 'RESOURCE'
    METHOD = 'METHOD'
    PATH_PARAMETER = 'PATH_PARAMETER'
    QUERY_PARAMETER = 'QUERY_PARAMETER'
    REQUEST_HEADER = 'REQUEST_HEADER'
    REQUEST_BODY = 'REQUEST_BODY'
    RESPONSE = 'RESPONSE'
    RESPONSE_HEADER = 'RESPONSE_HEADER'
    RESPONSE_BODY = 'RESPONSE_BODY'


class DomainNameStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    UPDATING = 'UPDATING'
    PENDING = 'PENDING'
    PENDING_CERTIFICATE_REIMPORT = 'PENDING_CERTIFICATE_REIMPORT'
    PENDING_OWNERSHIP_VERIFICATION = 'PENDING_OWNERSHIP_VERIFICATION'


class Double(RootModel[float]):
    root: float


class EndpointType(Enum):
    REGIONAL = 'REGIONAL'
    EDGE = 'EDGE'
    PRIVATE = 'PRIVATE'


class ExportResponse(BaseModel):
    body: Optional[Blob] = None


class FlushStageAuthorizersCacheRequest(BaseModel):
    pass


class FlushStageCacheRequest(BaseModel):
    pass


class GatewayResponseType(Enum):
    DEFAULT_4XX = 'DEFAULT_4XX'
    DEFAULT_5XX = 'DEFAULT_5XX'
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND'
    UNAUTHORIZED = 'UNAUTHORIZED'
    INVALID_API_KEY = 'INVALID_API_KEY'
    ACCESS_DENIED = 'ACCESS_DENIED'
    AUTHORIZER_FAILURE = 'AUTHORIZER_FAILURE'
    AUTHORIZER_CONFIGURATION_ERROR = 'AUTHORIZER_CONFIGURATION_ERROR'
    INVALID_SIGNATURE = 'INVALID_SIGNATURE'
    EXPIRED_TOKEN = 'EXPIRED_TOKEN'
    MISSING_AUTHENTICATION_TOKEN = 'MISSING_AUTHENTICATION_TOKEN'
    INTEGRATION_FAILURE = 'INTEGRATION_FAILURE'
    INTEGRATION_TIMEOUT = 'INTEGRATION_TIMEOUT'
    API_CONFIGURATION_ERROR = 'API_CONFIGURATION_ERROR'
    UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE'
    BAD_REQUEST_PARAMETERS = 'BAD_REQUEST_PARAMETERS'
    BAD_REQUEST_BODY = 'BAD_REQUEST_BODY'
    REQUEST_TOO_LARGE = 'REQUEST_TOO_LARGE'
    THROTTLED = 'THROTTLED'
    QUOTA_EXCEEDED = 'QUOTA_EXCEEDED'
    WAF_FILTERED = 'WAF_FILTERED'


class GetAccountRequest(BaseModel):
    pass


class GetApiKeyRequest(BaseModel):
    pass


class GetApiKeysRequest(BaseModel):
    pass


class GetAuthorizerRequest(BaseModel):
    pass


class GetAuthorizersRequest(BaseModel):
    pass


class GetBasePathMappingRequest(BaseModel):
    pass


class GetBasePathMappingsRequest(BaseModel):
    pass


class GetClientCertificateRequest(BaseModel):
    pass


class GetClientCertificatesRequest(BaseModel):
    pass


class GetDeploymentRequest(BaseModel):
    pass


class GetDeploymentsRequest(BaseModel):
    pass


class GetDocumentationPartRequest(BaseModel):
    pass


class GetDocumentationPartsRequest(BaseModel):
    pass


class GetDocumentationVersionRequest(BaseModel):
    pass


class GetDocumentationVersionsRequest(BaseModel):
    pass


class GetDomainNameRequest(BaseModel):
    pass


class GetDomainNamesRequest(BaseModel):
    pass


class GetExportRequest(BaseModel):
    pass


class GetGatewayResponseRequest(BaseModel):
    pass


class GetGatewayResponsesRequest(BaseModel):
    pass


class GetIntegrationRequest(BaseModel):
    pass


class GetIntegrationResponseRequest(BaseModel):
    pass


class GetMethodRequest(BaseModel):
    pass


class GetMethodResponseRequest(BaseModel):
    pass


class GetModelRequest(BaseModel):
    pass


class GetModelTemplateRequest(BaseModel):
    pass


class GetModelsRequest(BaseModel):
    pass


class GetRequestValidatorRequest(BaseModel):
    pass


class GetRequestValidatorsRequest(BaseModel):
    pass


class GetResourceRequest(BaseModel):
    pass


class GetResourcesRequest(BaseModel):
    pass


class GetRestApiRequest(BaseModel):
    pass


class GetRestApisRequest(BaseModel):
    pass


class GetSdkRequest(BaseModel):
    pass


class GetSdkTypeRequest(BaseModel):
    pass


class GetSdkTypesRequest(BaseModel):
    pass


class GetStageRequest(BaseModel):
    pass


class GetStagesRequest(BaseModel):
    pass


class GetTagsRequest(BaseModel):
    pass


class GetUsagePlanKeyRequest(BaseModel):
    pass


class GetUsagePlanKeysRequest(BaseModel):
    pass


class GetUsagePlanRequest(BaseModel):
    pass


class GetUsagePlansRequest(BaseModel):
    pass


class GetUsageRequest(BaseModel):
    pass


class GetVpcLinkRequest(BaseModel):
    pass


class GetVpcLinksRequest(BaseModel):
    pass


class ImportApiKeysRequest(BaseModel):
    body: Blob


class ImportDocumentationPartsRequest(BaseModel):
    body: Blob


class ImportRestApiRequest(BaseModel):
    body: Blob


class Integer(RootModel[int]):
    root: int


class IntegrationType(Enum):
    HTTP = 'HTTP'
    AWS = 'AWS'
    MOCK = 'MOCK'
    HTTP_PROXY = 'HTTP_PROXY'
    AWS_PROXY = 'AWS_PROXY'


class LimitExceededException(RootModel[Any]):
    root: Any


class ListOfEndpointType(RootModel[List[EndpointType]]):
    root: List[EndpointType]


class LocationStatusType(Enum):
    DOCUMENTED = 'DOCUMENTED'
    UNDOCUMENTED = 'UNDOCUMENTED'


class Long(RootModel[int]):
    root: int


class NotFoundException(RootModel[Any]):
    root: Any


class NullableBoolean(RootModel[bool]):
    root: bool


class NullableInteger(RootModel[int]):
    root: int


class Op(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'
    move = 'move'
    copy = 'copy'
    test = 'test'


class ProviderARN(RootModel[str]):
    root: str


class PutMode(Enum):
    merge = 'merge'
    overwrite = 'overwrite'


class PutRestApiRequest(BaseModel):
    body: Blob


class QuotaPeriodType(Enum):
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'


class QuotaSettings(BaseModel):
    limit: Optional[Integer] = None
    offset: Optional[Integer] = None
    period: Optional[QuotaPeriodType] = None


class SdkResponse(BaseModel):
    body: Optional[Blob] = None


class SecurityPolicy(Enum):
    TLS_1_0 = 'TLS_1_0'
    TLS_1_2 = 'TLS_1_2'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StatusCode(RootModel[constr(pattern=r'[1-5]\d\d')]):
    root: constr(pattern=r'[1-5]\d\d') = Field(..., description='The status code.')


class String(RootModel[str]):
    root: str


class Template(BaseModel):
    value: Optional[String] = None


class ThrottleSettings(BaseModel):
    burstLimit: Optional[Integer] = None
    rateLimit: Optional[Double] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class TlsConfig(BaseModel):
    insecureSkipVerification: Optional[Boolean] = None


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnauthorizedCacheControlHeaderStrategy(Enum):
    FAIL_WITH_403 = 'FAIL_WITH_403'
    SUCCEED_WITH_RESPONSE_HEADER = 'SUCCEED_WITH_RESPONSE_HEADER'
    SUCCEED_WITHOUT_RESPONSE_HEADER = 'SUCCEED_WITHOUT_RESPONSE_HEADER'


class UnauthorizedException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UsagePlanKey(BaseModel):
    id: Optional[String] = None
    name: Optional[String] = None
    type: Optional[String] = None
    value: Optional[String] = None


class VpcLinkStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    PENDING = 'PENDING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class Format(Enum):
    csv = 'csv'


class Mode(Enum):
    import_ = 'import'


class ApikeysModeImportFormatPostRequest(BaseModel):
    body: str = Field(
        ...,
        description='The payload of the POST request to import API keys. For the payload format, see API Key File Format.',
    )


class ClientcertificatesPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the ClientCertificate.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )


class MutualTlsAuthentication1(BaseModel):
    truststoreUri: Optional[String] = None
    truststoreVersion: Optional[String] = None


class DomainnamesDomainNameBasepathmappingsPostRequest(BaseModel):
    basePath: Optional[str] = Field(
        None,
        description="The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.",
    )
    restApiId: str = Field(
        ..., description='The string identifier of the associated RestApi.'
    )
    stage: Optional[str] = Field(
        None,
        description="The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.",
    )


class ApiKeySource(Enum):
    HEADER = 'HEADER'
    AUTHORIZER = 'AUTHORIZER'


class RestapisModeImportPostRequest(BaseModel):
    body: str = Field(
        ...,
        description='The POST request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.',
    )


class Parameters(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class Mode4(Enum):
    merge = 'merge'
    overwrite = 'overwrite'


class RestapisRestapiIdPutRequest(BaseModel):
    body: str = Field(
        ...,
        description='The PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.',
    )


class Type(Enum):
    TOKEN = 'TOKEN'
    REQUEST = 'REQUEST'
    COGNITO_USER_POOLS = 'COGNITO_USER_POOLS'


class RestapisRestapiIdAuthorizersPostRequest(BaseModel):
    authType: Optional[str] = Field(
        None,
        description='Optional customer-defined field, used in OpenAPI imports and exports without functional impact.',
    )
    authorizerCredentials: Optional[str] = Field(
        None,
        description="Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.",
    )
    authorizerResultTtlInSeconds: Optional[int] = Field(
        None,
        description='The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.',
    )
    authorizerUri: Optional[str] = Field(
        None,
        description="Specifies the authorizer's Uniform Resource Identifier (URI). For <code>TOKEN</code> or <code>REQUEST</code> authorizers, this must be a well-formed Lambda function URI, for example, <code>arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations</code>. In general, the URI has this form <code>arn:aws:apigateway:{region}:lambda:path/{service_api}</code>, where <code>{region}</code> is the same as the region hosting the Lambda function, <code>path</code> indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial <code>/</code>. For Lambda functions, this is usually of the form <code>/2015-03-31/functions/[FunctionARN]/invocations</code>.",
    )
    identitySource: Optional[str] = Field(
        None,
        description='The identity source for which authorization is requested. For a <code>TOKEN</code> or <code>COGNITO_USER_POOLS</code> authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is <code>Auth</code>, the header mapping expression is <code>method.request.header.Auth</code>. For the <code>REQUEST</code> authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an <code>Auth</code> header, a <code>Name</code> query string parameter are defined as identity sources, this value is <code>method.request.header.Auth, method.request.querystring.Name</code>. These parameters will be used to derive the authorization caching key and to perform runtime validation of the <code>REQUEST</code> authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.',
    )
    identityValidationExpression: Optional[str] = Field(
        None,
        description="A validation expression for the incoming identity token. For <code>TOKEN</code> authorizers, this value is a regular expression. For <code>COGNITO_USER_POOLS</code> authorizers, API Gateway will match the <code>aud</code> field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to the <code>REQUEST</code> authorizer.",
    )
    name: str = Field(..., description='The name of the authorizer.')
    providerARNs: Optional[List[ProviderARN]] = Field(
        None,
        description='A list of the Amazon Cognito user pool ARNs for the <code>COGNITO_USER_POOLS</code> authorizer. Each element is of this format: <code>arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}</code>. For a <code>TOKEN</code> or <code>REQUEST</code> authorizer, this is not defined. ',
    )
    type: Type = Field(
        ...,
        description='The authorizer type. Valid values are <code>TOKEN</code> for a Lambda function using a single authorization token submitted in a custom header, <code>REQUEST</code> for a Lambda function using incoming request parameters, and <code>COGNITO_USER_POOLS</code> for using an Amazon Cognito user pool.',
    )


class Embed(RootModel[List[String]]):
    root: List[String]


class Type1(Enum):
    API = 'API'
    AUTHORIZER = 'AUTHORIZER'
    MODEL = 'MODEL'
    RESOURCE = 'RESOURCE'
    METHOD = 'METHOD'
    PATH_PARAMETER = 'PATH_PARAMETER'
    QUERY_PARAMETER = 'QUERY_PARAMETER'
    REQUEST_HEADER = 'REQUEST_HEADER'
    REQUEST_BODY = 'REQUEST_BODY'
    RESPONSE = 'RESPONSE'
    RESPONSE_HEADER = 'RESPONSE_HEADER'
    RESPONSE_BODY = 'RESPONSE_BODY'


class LocationStatus(Enum):
    DOCUMENTED = 'DOCUMENTED'
    UNDOCUMENTED = 'UNDOCUMENTED'


class Location(BaseModel):
    method: Optional[String] = None
    name: Optional[String] = None
    path: Optional[String] = None
    statusCode: Optional[DocumentationPartLocationStatusCode] = None
    type: Optional[DocumentationPartType] = None


class RestapisRestapiIdDocumentationPartsPostRequest(BaseModel):
    location: Location = Field(
        ...,
        description='Specifies the target API entity to which the documentation applies.',
    )
    properties: str = Field(
        ...,
        description='The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.',
    )


class RestapisRestapiIdDocumentationPartsPutRequest(BaseModel):
    body: str = Field(
        ...,
        description='Raw byte array representing the to-be-imported documentation parts. To import from an OpenAPI file, this is a JSON object.',
    )


class RestapisRestapiIdDocumentationVersionsPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='A description about the new documentation snapshot.'
    )
    documentationVersion: str = Field(
        ..., description='The version identifier of the new snapshot.'
    )
    stageName: Optional[str] = Field(
        None,
        description='The stage name to be associated with the new documentation snapshot.',
    )


class ResponseType(Enum):
    DEFAULT_4XX = 'DEFAULT_4XX'
    DEFAULT_5XX = 'DEFAULT_5XX'
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND'
    UNAUTHORIZED = 'UNAUTHORIZED'
    INVALID_API_KEY = 'INVALID_API_KEY'
    ACCESS_DENIED = 'ACCESS_DENIED'
    AUTHORIZER_FAILURE = 'AUTHORIZER_FAILURE'
    AUTHORIZER_CONFIGURATION_ERROR = 'AUTHORIZER_CONFIGURATION_ERROR'
    INVALID_SIGNATURE = 'INVALID_SIGNATURE'
    EXPIRED_TOKEN = 'EXPIRED_TOKEN'
    MISSING_AUTHENTICATION_TOKEN = 'MISSING_AUTHENTICATION_TOKEN'
    INTEGRATION_FAILURE = 'INTEGRATION_FAILURE'
    INTEGRATION_TIMEOUT = 'INTEGRATION_TIMEOUT'
    API_CONFIGURATION_ERROR = 'API_CONFIGURATION_ERROR'
    UNSUPPORTED_MEDIA_TYPE = 'UNSUPPORTED_MEDIA_TYPE'
    BAD_REQUEST_PARAMETERS = 'BAD_REQUEST_PARAMETERS'
    BAD_REQUEST_BODY = 'BAD_REQUEST_BODY'
    REQUEST_TOO_LARGE = 'REQUEST_TOO_LARGE'
    THROTTLED = 'THROTTLED'
    QUOTA_EXCEEDED = 'QUOTA_EXCEEDED'
    WAF_FILTERED = 'WAF_FILTERED'


class RestapisRestapiIdGatewayresponsesResponseTypePutRequest(BaseModel):
    responseParameters: Optional[Dict[str, String]] = Field(
        None,
        description='Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.',
    )
    responseTemplates: Optional[Dict[str, String]] = Field(
        None,
        description='Response templates of the GatewayResponse as a string-to-string map of key-value pairs.',
    )
    statusCode: Optional[constr(pattern=r'[1-5]\d\d')] = Field(
        None, description='The status code.'
    )


class RestapisRestapiIdModelsPostRequest(BaseModel):
    contentType: str = Field(..., description='The content-type for the model.')
    description: Optional[str] = Field(
        None, description='The description of the model.'
    )
    name: str = Field(..., description='The name of the model. Must be alphanumeric.')
    schema_: Optional[str] = Field(
        None,
        alias='schema',
        description='The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.',
    )


class RestapisRestapiIdRequestvalidatorsPostRequest(BaseModel):
    name: Optional[str] = Field(
        None, description='The name of the to-be-created RequestValidator.'
    )
    validateRequestBody: Optional[bool] = Field(
        None,
        description='A Boolean flag to indicate whether to validate request body according to the configured model schema for the method (<code>true</code>) or not (<code>false</code>).',
    )
    validateRequestParameters: Optional[bool] = Field(
        None,
        description='A Boolean flag to indicate whether to validate request parameters, <code>true</code>, or not <code>false</code>.',
    )


class RestapisRestapiIdResourcesParentIdPostRequest(BaseModel):
    pathPart: str = Field(..., description='The last path segment for this resource.')


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodPutRequest(BaseModel):
    apiKeyRequired: Optional[bool] = Field(
        None, description='Specifies whether the method required a valid ApiKey.'
    )
    authorizationScopes: Optional[List[String]] = Field(
        None,
        description='A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.',
    )
    authorizationType: str = Field(
        ...,
        description="The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.",
    )
    authorizerId: Optional[str] = Field(
        None,
        description='Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.',
    )
    operationName: Optional[str] = Field(
        None,
        description='A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.',
    )
    requestModels: Optional[Dict[str, String]] = Field(
        None,
        description="Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.",
    )
    requestParameters: Optional[Dict[str, NullableBoolean]] = Field(
        None,
        description='A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.',
    )
    requestValidatorId: Optional[str] = Field(
        None,
        description='The identifier of a RequestValidator for validating the method request.',
    )


class ContentHandling(Enum):
    CONVERT_TO_BINARY = 'CONVERT_TO_BINARY'
    CONVERT_TO_TEXT = 'CONVERT_TO_TEXT'


class Type3(Enum):
    HTTP = 'HTTP'
    AWS = 'AWS'
    MOCK = 'MOCK'
    HTTP_PROXY = 'HTTP_PROXY'
    AWS_PROXY = 'AWS_PROXY'


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodIntegrationPutRequest(
    BaseModel
):
    cacheKeyParameters: Optional[List[String]] = Field(
        None,
        description='A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.',
    )
    cacheNamespace: Optional[str] = Field(
        None,
        description='Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.',
    )
    connectionId: Optional[str] = Field(
        None,
        description='The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.',
    )
    connectionType: Optional[ConnectionType] = Field(
        None,
        description='The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.',
    )
    contentHandling: Optional[ContentHandling] = Field(
        None,
        description='<p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>',
    )
    credentials: Optional[str] = Field(
        None,
        description='Specifies whether credentials are required for a put integration.',
    )
    httpMethod: Optional[str] = Field(
        None, description='The HTTP method for the integration.'
    )
    passthroughBehavior: Optional[str] = Field(
        None,
        description='Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. ',
    )
    requestParameters: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.',
    )
    requestTemplates: Optional[Dict[str, String]] = Field(
        None,
        description='Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.',
    )
    timeoutInMillis: Optional[int] = Field(
        None,
        description='Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.',
    )
    tlsConfig: Optional[TlsConfig] = Field(
        None, description='Specifies the TLS configuration for an integration.'
    )
    type: Type3 = Field(
        ...,
        description='The integration type. The valid value is <code>HTTP</code> for integrating an API method with an HTTP backend; <code>AWS</code> with any AWS service endpoints; <code>MOCK</code> for testing without actually invoking the backend; <code>HTTP_PROXY</code> for integrating with the HTTP proxy integration; <code>AWS_PROXY</code> for integrating with the Lambda proxy integration. ',
    )
    uri: Optional[str] = Field(
        None,
        description='Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodIntegrationResponsesStatusCodePutRequest(
    BaseModel
):
    contentHandling: Optional[ContentHandling] = Field(
        None,
        description='<p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>',
    )
    responseParameters: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.',
    )
    responseTemplates: Optional[Dict[str, String]] = Field(
        None, description="Specifies a put integration response's templates."
    )
    selectionPattern: Optional[str] = Field(
        None,
        description='Specifies the selection pattern of a put integration response.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodResponsesStatusCodePutRequest(
    BaseModel
):
    responseModels: Optional[Dict[str, String]] = Field(
        None,
        description="Specifies the Model resources used for the response's content type. Response models are represented as a key/value map, with a content type as the key and a Model name as the value.",
    )
    responseParameters: Optional[Dict[str, NullableBoolean]] = Field(
        None,
        description="A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header name and the associated value is a Boolean flag indicating whether the method response parameter is required or not. The method response header names must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The response parameter names defined here are available in the integration response to be mapped from an integration response header expressed in <code>integration.response.header.{name}</code>, a static value enclosed within a pair of single quotes (e.g., <code>'application/json'</code>), or a JSON expression from the back-end response payload in the form of <code>integration.response.body.{JSON-expression}</code>, where <code>JSON-expression</code> is a valid JSON expression without the <code>$</code> prefix.)",
    )


class TagsResourceArnPutRequest(BaseModel):
    tags: Dict[str, String] = Field(
        ...,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )


class TagKeys(RootModel[List[String]]):
    root: List[String]


class Quota(BaseModel):
    limit: Optional[Integer] = None
    offset: Optional[Integer] = None
    period: Optional[QuotaPeriodType] = None


class Throttle(BaseModel):
    burstLimit: Optional[Integer] = None
    rateLimit: Optional[Double] = None


class UsageplansUsageplanIdKeysPostRequest(BaseModel):
    keyId: str = Field(
        ...,
        description='The identifier of a UsagePlanKey resource for a plan customer.',
    )
    keyType: str = Field(
        ..., description='The type of a UsagePlanKey resource for a plan customer.'
    )


class VpclinksPostRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='The description of the VPC link.'
    )
    name: str = Field(
        ..., description='The name used to label and identify the VPC link.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )
    targetArns: List[String] = Field(
        ...,
        description='The ARN of the network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.',
    )


class AccessLogSettings(BaseModel):
    destinationArn: Optional[String] = None
    format: Optional[String] = None


class BasePathMapping(BaseModel):
    basePath: Optional[String] = None
    restApiId: Optional[String] = None
    stage: Optional[String] = None


class CreateBasePathMappingRequest(BaseModel):
    basePath: Optional[String] = None
    restApiId: String
    stage: Optional[String] = None


class CreateDocumentationVersionRequest(BaseModel):
    description: Optional[String] = None
    documentationVersion: String
    stageName: Optional[String] = None


class CreateModelRequest(BaseModel):
    contentType: String
    description: Optional[String] = None
    name: String
    schema_: Optional[String] = Field(None, alias='schema')


class CreateRequestValidatorRequest(BaseModel):
    name: Optional[String] = None
    validateRequestBody: Optional[Boolean] = None
    validateRequestParameters: Optional[Boolean] = None


class CreateResourceRequest(BaseModel):
    pathPart: String


class CreateUsagePlanKeyRequest(BaseModel):
    keyId: String
    keyType: String


class DocumentationPartLocation(BaseModel):
    method: Optional[String] = None
    name: Optional[String] = None
    path: Optional[String] = None
    statusCode: Optional[DocumentationPartLocationStatusCode] = None
    type: DocumentationPartType


class DocumentationVersion(BaseModel):
    createdDate: Optional[Timestamp] = None
    description: Optional[String] = None
    version: Optional[String] = None


class ListOfARNs(RootModel[List[ProviderARN]]):
    root: List[ProviderARN]


class ListOfBasePathMapping(RootModel[List[BasePathMapping]]):
    root: List[BasePathMapping]


class ListOfDocumentationVersion(RootModel[List[DocumentationVersion]]):
    root: List[DocumentationVersion]


class ListOfLong(RootModel[List[Long]]):
    root: List[Long]


class ListOfString(RootModel[List[String]]):
    root: List[String]


class ListOfUsage(RootModel[List[ListOfLong]]):
    root: List[ListOfLong]


class ListOfUsagePlanKey(RootModel[List[UsagePlanKey]]):
    root: List[UsagePlanKey]


class MapOfApiStageThrottleSettings(RootModel[Optional[Dict[str, ThrottleSettings]]]):
    root: Optional[Dict[str, ThrottleSettings]] = None


class MapOfKeyUsages(RootModel[Optional[Dict[str, ListOfUsage]]]):
    root: Optional[Dict[str, ListOfUsage]] = None


class MapOfStringToBoolean(RootModel[Optional[Dict[str, NullableBoolean]]]):
    root: Optional[Dict[str, NullableBoolean]] = None


class MapOfStringToList(RootModel[Optional[Dict[str, ListOfString]]]):
    root: Optional[Dict[str, ListOfString]] = None


class MapOfStringToString(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class MethodResponse(BaseModel):
    responseModels: Optional[MapOfStringToString] = None
    responseParameters: Optional[MapOfStringToBoolean] = None
    statusCode: Optional[StatusCode] = None


class MethodSetting(BaseModel):
    cacheDataEncrypted: Optional[Boolean] = None
    cacheTtlInSeconds: Optional[Integer] = None
    cachingEnabled: Optional[Boolean] = None
    dataTraceEnabled: Optional[Boolean] = None
    loggingLevel: Optional[String] = None
    metricsEnabled: Optional[Boolean] = None
    requireAuthorizationForCacheControl: Optional[Boolean] = None
    throttlingBurstLimit: Optional[Integer] = None
    throttlingRateLimit: Optional[Double] = None
    unauthorizedCacheControlHeaderStrategy: Optional[
        UnauthorizedCacheControlHeaderStrategy
    ] = None


class MethodSnapshot(BaseModel):
    apiKeyRequired: Optional[Boolean] = None
    authorizationType: Optional[String] = None


class Model(BaseModel):
    contentType: Optional[String] = None
    description: Optional[String] = None
    id: Optional[String] = None
    name: Optional[String] = None
    schema_: Optional[String] = Field(None, alias='schema')


class MutualTlsAuthentication(BaseModel):
    truststoreUri: Optional[String] = None
    truststoreVersion: Optional[String] = None
    truststoreWarnings: Optional[ListOfString] = None


class MutualTlsAuthenticationInput(BaseModel):
    truststoreUri: Optional[String] = None
    truststoreVersion: Optional[String] = None


class PatchOperation(BaseModel):
    from_: Optional[String] = Field(None, alias='from')
    op: Optional[Op] = None
    path: Optional[String] = None
    value: Optional[String] = None


class PutGatewayResponseRequest(BaseModel):
    responseParameters: Optional[MapOfStringToString] = None
    responseTemplates: Optional[MapOfStringToString] = None
    statusCode: Optional[StatusCode] = None


class PutIntegrationRequest(BaseModel):
    cacheKeyParameters: Optional[ListOfString] = None
    cacheNamespace: Optional[String] = None
    connectionId: Optional[String] = None
    connectionType: Optional[ConnectionType] = None
    contentHandling: Optional[ContentHandlingStrategy] = None
    credentials: Optional[String] = None
    integrationHttpMethod: Optional[String] = None
    passthroughBehavior: Optional[String] = None
    requestParameters: Optional[MapOfStringToString] = None
    requestTemplates: Optional[MapOfStringToString] = None
    timeoutInMillis: Optional[NullableInteger] = None
    tlsConfig: Optional[TlsConfig] = None
    type: IntegrationType
    uri: Optional[String] = None


class PutIntegrationResponseRequest(BaseModel):
    contentHandling: Optional[ContentHandlingStrategy] = None
    responseParameters: Optional[MapOfStringToString] = None
    responseTemplates: Optional[MapOfStringToString] = None
    selectionPattern: Optional[String] = None


class PutMethodRequest(BaseModel):
    apiKeyRequired: Optional[Boolean] = None
    authorizationScopes: Optional[ListOfString] = None
    authorizationType: String
    authorizerId: Optional[String] = None
    operationName: Optional[String] = None
    requestModels: Optional[MapOfStringToString] = None
    requestParameters: Optional[MapOfStringToBoolean] = None
    requestValidatorId: Optional[String] = None


class PutMethodResponseRequest(BaseModel):
    responseModels: Optional[MapOfStringToString] = None
    responseParameters: Optional[MapOfStringToBoolean] = None


class RequestValidator(BaseModel):
    id: Optional[String] = None
    name: Optional[String] = None
    validateRequestBody: Optional[Boolean] = None
    validateRequestParameters: Optional[Boolean] = None


class SdkConfigurationProperty(BaseModel):
    defaultValue: Optional[String] = None
    description: Optional[String] = None
    friendlyName: Optional[String] = None
    name: Optional[String] = None
    required: Optional[Boolean] = None


class StageKey(BaseModel):
    restApiId: Optional[String] = None
    stageName: Optional[String] = None


class TagResourceRequest(BaseModel):
    tags: MapOfStringToString


class Tags(BaseModel):
    tags: Optional[MapOfStringToString] = None


class TestInvokeAuthorizerRequest(BaseModel):
    additionalContext: Optional[MapOfStringToString] = None
    body: Optional[String] = None
    headers: Optional[MapOfStringToString] = None
    multiValueHeaders: Optional[MapOfStringToList] = None
    pathWithQueryString: Optional[String] = None
    stageVariables: Optional[MapOfStringToString] = None


class TestInvokeAuthorizerResponse(BaseModel):
    authorization: Optional[MapOfStringToList] = None
    claims: Optional[MapOfStringToString] = None
    clientStatus: Optional[Integer] = None
    latency: Optional[Long] = None
    log: Optional[String] = None
    policy: Optional[String] = None
    principalId: Optional[String] = None


class TestInvokeMethodRequest(BaseModel):
    body: Optional[String] = None
    clientCertificateId: Optional[String] = None
    headers: Optional[MapOfStringToString] = None
    multiValueHeaders: Optional[MapOfStringToList] = None
    pathWithQueryString: Optional[String] = None
    stageVariables: Optional[MapOfStringToString] = None


class TestInvokeMethodResponse(BaseModel):
    body: Optional[String] = None
    headers: Optional[MapOfStringToString] = None
    latency: Optional[Long] = None
    log: Optional[String] = None
    multiValueHeaders: Optional[MapOfStringToList] = None
    status: Optional[Integer] = None


class Usage(BaseModel):
    endDate: Optional[String] = None
    items: Optional[MapOfKeyUsages] = None
    position: Optional[String] = None
    startDate: Optional[String] = None
    usagePlanId: Optional[String] = None


class UsagePlanKeys(BaseModel):
    items: Optional[ListOfUsagePlanKey] = None
    position: Optional[String] = None


class VpcLink(BaseModel):
    description: Optional[String] = None
    id: Optional[String] = None
    name: Optional[String] = None
    status: Optional[VpcLinkStatus] = None
    statusMessage: Optional[String] = None
    tags: Optional[MapOfStringToString] = None
    targetArns: Optional[ListOfString] = None


class AccountPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class ApikeysPostRequest(BaseModel):
    customerId: Optional[str] = Field(
        None,
        description='An AWS Marketplace customer identifier , when integrating with the AWS SaaS Marketplace.',
    )
    description: Optional[str] = Field(
        None, description='The description of the ApiKey.'
    )
    enabled: Optional[bool] = Field(
        None, description='Specifies whether the ApiKey can be used by callers.'
    )
    generateDistinctId: Optional[bool] = Field(
        None,
        description='Specifies whether (<code>true</code>) or not (<code>false</code>) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.',
    )
    name: Optional[str] = Field(None, description='The name of the ApiKey.')
    stageKeys: Optional[List[StageKey]] = Field(
        None,
        description='DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.',
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )
    value: Optional[str] = Field(None, description='Specifies a value of the API key.')


class ApikeysApiKeyPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class ClientcertificatesClientcertificateIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class EndpointConfiguration(BaseModel):
    types: Optional[ListOfEndpointType] = None
    vpcEndpointIds: Optional[ListOfString] = None


class DomainnamesPostRequest(BaseModel):
    certificateArn: Optional[str] = Field(
        None,
        description='The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.',
    )
    certificateBody: Optional[str] = Field(
        None,
        description='[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.',
    )
    certificateChain: Optional[str] = Field(
        None,
        description='[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.',
    )
    certificateName: Optional[str] = Field(
        None,
        description='The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.',
    )
    certificatePrivateKey: Optional[str] = Field(
        None,
        description="[Deprecated] Your edge-optimized endpoint's domain name certificate's private key.",
    )
    domainName: str = Field(..., description='The name of the DomainName resource.')
    endpointConfiguration: Optional[EndpointConfiguration] = Field(
        None,
        description='The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. ',
    )
    mutualTlsAuthentication: Optional[MutualTlsAuthentication1] = Field(
        None,
        description='The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.',
    )
    ownershipVerificationCertificateArn: Optional[str] = Field(
        None,
        description='The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.',
    )
    regionalCertificateArn: Optional[str] = Field(
        None,
        description='The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.',
    )
    regionalCertificateName: Optional[str] = Field(
        None,
        description='The user-friendly name of the certificate that will be used by regional endpoint for this domain name.',
    )
    securityPolicy: Optional[SecurityPolicy] = Field(
        None,
        description='The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.',
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )


class DomainnamesDomainNamePatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class DomainnamesDomainNameBasepathmappingsBasePathPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisPostRequest(BaseModel):
    apiKeySource: Optional[ApiKeySource] = Field(
        None,
        description='The source of the API key for metering requests according to a usage plan. Valid values are: &gt;<code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.',
    )
    binaryMediaTypes: Optional[List[String]] = Field(
        None,
        description='The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.',
    )
    cloneFrom: Optional[str] = Field(
        None, description='The ID of the RestApi that you want to clone from.'
    )
    description: Optional[str] = Field(
        None, description='The description of the RestApi.'
    )
    disableExecuteApiEndpoint: Optional[bool] = Field(
        None,
        description='Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint',
    )
    endpointConfiguration: Optional[EndpointConfiguration] = Field(
        None,
        description='The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. ',
    )
    minimumCompressionSize: Optional[int] = Field(
        None,
        description='A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.',
    )
    name: str = Field(..., description='The name of the RestApi.')
    policy: Optional[str] = Field(
        None,
        description='A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.',
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )
    version: Optional[str] = Field(
        None, description='A version identifier for the API.'
    )


class RestapisRestapiIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdAuthorizersAuthorizerIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdAuthorizersAuthorizerIdPostRequest(BaseModel):
    additionalContext: Optional[Dict[str, String]] = Field(
        None, description='A key-value map of additional context variables.'
    )
    body: Optional[str] = Field(
        None,
        description='The simulated request body of an incoming invocation request.',
    )
    headers: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.',
    )
    multiValueHeaders: Optional[Dict[str, ListOfString]] = Field(
        None,
        description='The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.',
    )
    pathWithQueryString: Optional[str] = Field(
        None,
        description='The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.',
    )
    stageVariables: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map of stage variables to simulate an invocation on a deployed Stage.',
    )


class CanarySettings(BaseModel):
    percentTraffic: Optional[Double] = None
    stageVariableOverrides: Optional[MapOfStringToString] = None
    useStageCache: Optional[Boolean] = None


class RestapisRestapiIdDeploymentsPostRequest(BaseModel):
    cacheClusterEnabled: Optional[bool] = Field(
        None,
        description='Enables a cache cluster for the Stage resource specified in the input.',
    )
    cacheClusterSize: Optional[CacheClusterSize] = Field(
        None, description='Returns the size of the CacheCluster.'
    )
    canarySettings: Optional[CanarySettings] = Field(
        None, description='The input configuration for a canary deployment.'
    )
    description: Optional[str] = Field(
        None, description='The description for the Deployment resource to create.'
    )
    stageDescription: Optional[str] = Field(
        None,
        description='The description of the Stage resource for the Deployment resource to create.',
    )
    stageName: Optional[str] = Field(
        None,
        description='The name of the Stage resource for the Deployment resource to create.',
    )
    tracingEnabled: Optional[bool] = Field(
        None,
        description='Specifies whether active tracing with X-ray is enabled for the Stage.',
    )
    variables: Optional[Dict[str, String]] = Field(
        None,
        description='A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.',
    )


class RestapisRestapiIdDeploymentsDeploymentIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdDocumentationPartsPartIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdDocumentationVersionsDocVersionPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdGatewayresponsesResponseTypePatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdModelsModelNamePatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdRequestvalidatorsRequestvalidatorIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdResourcesResourceIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodPostRequest(BaseModel):
    body: Optional[str] = Field(
        None,
        description='The simulated request body of an incoming invocation request.',
    )
    clientCertificateId: Optional[str] = Field(
        None,
        description='A ClientCertificate identifier to use in the test invocation. API Gateway will use the certificate when making the HTTPS request to the defined back-end endpoint.',
    )
    headers: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map of headers to simulate an incoming invocation request.',
    )
    multiValueHeaders: Optional[Dict[str, ListOfString]] = Field(
        None,
        description='The headers as a map from string to list of values to simulate an incoming invocation request.',
    )
    pathWithQueryString: Optional[str] = Field(
        None,
        description='The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.',
    )
    stageVariables: Optional[Dict[str, String]] = Field(
        None,
        description='A key-value map of stage variables to simulate an invocation on a deployed Stage.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodIntegrationPatchRequest(
    BaseModel
):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodIntegrationResponsesStatusCodePatchRequest(
    BaseModel
):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class RestapisRestapiIdResourcesResourceIdMethodsHttpMethodResponsesStatusCodePatchRequest(
    BaseModel
):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class CanarySettings2(BaseModel):
    deploymentId: Optional[String] = None
    percentTraffic: Optional[Double] = None
    stageVariableOverrides: Optional[MapOfStringToString] = None
    useStageCache: Optional[Boolean] = None


class RestapisRestapiIdStagesPostRequest(BaseModel):
    cacheClusterEnabled: Optional[bool] = Field(
        None, description='Whether cache clustering is enabled for the stage.'
    )
    cacheClusterSize: Optional[CacheClusterSize] = Field(
        None, description='Returns the size of the CacheCluster.'
    )
    canarySettings: Optional[CanarySettings2] = Field(
        None, description='Configuration settings of a canary deployment.'
    )
    deploymentId: str = Field(
        ...,
        description='The identifier of the Deployment resource for the Stage resource.',
    )
    description: Optional[str] = Field(
        None, description='The description of the Stage resource.'
    )
    documentationVersion: Optional[str] = Field(
        None, description='The version of the associated API documentation.'
    )
    stageName: str = Field(
        ...,
        description='The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.',
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )
    tracingEnabled: Optional[bool] = Field(
        None,
        description='Specifies whether active tracing with X-ray is enabled for the Stage.',
    )
    variables: Optional[Dict[str, String]] = Field(
        None,
        description='A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.',
    )


class RestapisRestapiIdStagesStageNamePatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class UsageplansUsageplanIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class UsageplansUsageplanIdKeysKeyIdUsagePatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class VpclinksVpclinkIdPatchRequest(BaseModel):
    patchOperations: Optional[List[PatchOperation]] = Field(
        None,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class Account(BaseModel):
    apiKeyVersion: Optional[String] = None
    cloudwatchRoleArn: Optional[String] = None
    features: Optional[ListOfString] = None
    throttleSettings: Optional[ThrottleSettings] = None


class ApiKey(BaseModel):
    createdDate: Optional[Timestamp] = None
    customerId: Optional[String] = None
    description: Optional[String] = None
    enabled: Optional[Boolean] = None
    id: Optional[String] = None
    lastUpdatedDate: Optional[Timestamp] = None
    name: Optional[String] = None
    stageKeys: Optional[ListOfString] = None
    tags: Optional[MapOfStringToString] = None
    value: Optional[String] = None


class ApiKeyIds(BaseModel):
    ids: Optional[ListOfString] = None
    warnings: Optional[ListOfString] = None


class ApiStage(BaseModel):
    apiId: Optional[String] = None
    stage: Optional[String] = None
    throttle: Optional[MapOfApiStageThrottleSettings] = None


class Authorizer(BaseModel):
    authType: Optional[String] = None
    authorizerCredentials: Optional[String] = None
    authorizerResultTtlInSeconds: Optional[NullableInteger] = None
    authorizerUri: Optional[String] = None
    id: Optional[String] = None
    identitySource: Optional[String] = None
    identityValidationExpression: Optional[String] = None
    name: Optional[String] = None
    providerARNs: Optional[ListOfARNs] = None
    type: Optional[AuthorizerType] = None


class BasePathMappings(BaseModel):
    items: Optional[ListOfBasePathMapping] = None
    position: Optional[String] = None


class ClientCertificate(BaseModel):
    clientCertificateId: Optional[String] = None
    createdDate: Optional[Timestamp] = None
    description: Optional[String] = None
    expirationDate: Optional[Timestamp] = None
    pemEncodedCertificate: Optional[String] = None
    tags: Optional[MapOfStringToString] = None


class CreateAuthorizerRequest(BaseModel):
    authType: Optional[String] = None
    authorizerCredentials: Optional[String] = None
    authorizerResultTtlInSeconds: Optional[NullableInteger] = None
    authorizerUri: Optional[String] = None
    identitySource: Optional[String] = None
    identityValidationExpression: Optional[String] = None
    name: String
    providerARNs: Optional[ListOfARNs] = None
    type: AuthorizerType


class CreateDocumentationPartRequest(BaseModel):
    location: DocumentationPartLocation
    properties: Any = Field(
        ...,
        description='The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.',
    )


class CreateStageRequest(BaseModel):
    cacheClusterEnabled: Optional[Boolean] = None
    cacheClusterSize: Optional[CacheClusterSize] = None
    canarySettings: Optional[CanarySettings2] = None
    deploymentId: String
    description: Optional[String] = None
    documentationVersion: Optional[String] = None
    stageName: String
    tags: Optional[MapOfStringToString] = None
    tracingEnabled: Optional[Boolean] = None
    variables: Optional[MapOfStringToString] = None


class CreateVpcLinkRequest(BaseModel):
    description: Optional[String] = None
    name: String
    tags: Optional[MapOfStringToString] = None
    targetArns: ListOfString


class DeploymentCanarySettings(BaseModel):
    percentTraffic: Optional[Double] = None
    stageVariableOverrides: Optional[MapOfStringToString] = None
    useStageCache: Optional[Boolean] = None


class DocumentationPart(BaseModel):
    id: Optional[String] = None
    location: Optional[DocumentationPartLocation] = None
    properties: Optional[Any] = Field(
        None,
        description='A content map of API-specific key-value pairs describing the targeted API entity. The map must be encoded as a JSON string, e.g., <code>"{ \\"description\\": \\"The API does ...\\" }"</code>. Only OpenAPI-compliant documentation-related fields from the properties map are exported and, hence, published as part of the API entity definitions, while the original documentation parts are exported in a OpenAPI extension of <code>x-amazon-apigateway-documentation</code>.',
    )


class DocumentationPartIds(BaseModel):
    ids: Optional[ListOfString] = None
    warnings: Optional[ListOfString] = None


class DocumentationVersions(BaseModel):
    items: Optional[ListOfDocumentationVersion] = None
    position: Optional[String] = None


class GatewayResponse(BaseModel):
    defaultResponse: Optional[Boolean] = None
    responseParameters: Optional[MapOfStringToString] = None
    responseTemplates: Optional[MapOfStringToString] = None
    responseType: Optional[GatewayResponseType] = None
    statusCode: Optional[StatusCode] = None


class GenerateClientCertificateRequest(BaseModel):
    description: Optional[String] = None
    tags: Optional[MapOfStringToString] = None


class IntegrationResponse(BaseModel):
    contentHandling: Optional[ContentHandlingStrategy] = None
    responseParameters: Optional[MapOfStringToString] = None
    responseTemplates: Optional[MapOfStringToString] = None
    selectionPattern: Optional[String] = None
    statusCode: Optional[StatusCode] = None


class ListOfApiKey(RootModel[List[ApiKey]]):
    root: List[ApiKey]


class ListOfApiStage(RootModel[List[ApiStage]]):
    root: List[ApiStage]


class ListOfAuthorizer(RootModel[List[Authorizer]]):
    root: List[Authorizer]


class ListOfClientCertificate(RootModel[List[ClientCertificate]]):
    root: List[ClientCertificate]


class ListOfDocumentationPart(RootModel[List[DocumentationPart]]):
    root: List[DocumentationPart]


class ListOfGatewayResponse(RootModel[List[GatewayResponse]]):
    root: List[GatewayResponse]


class ListOfModel(RootModel[List[Model]]):
    root: List[Model]


class ListOfPatchOperation(RootModel[List[PatchOperation]]):
    root: List[PatchOperation] = Field(
        ...,
        description='A list of operations describing the updates to apply to the specified resource. The patches are applied in the order specified in the list.',
    )


class ListOfRequestValidator(RootModel[List[RequestValidator]]):
    root: List[RequestValidator]


class ListOfSdkConfigurationProperty(RootModel[List[SdkConfigurationProperty]]):
    root: List[SdkConfigurationProperty]


class ListOfStageKeys(RootModel[List[StageKey]]):
    root: List[StageKey]


class ListOfVpcLink(RootModel[List[VpcLink]]):
    root: List[VpcLink]


class MapOfIntegrationResponse(RootModel[Optional[Dict[str, IntegrationResponse]]]):
    root: Optional[Dict[str, IntegrationResponse]] = None


class MapOfMethodResponse(RootModel[Optional[Dict[str, MethodResponse]]]):
    root: Optional[Dict[str, MethodResponse]] = None


class MapOfMethodSettings(RootModel[Optional[Dict[str, MethodSetting]]]):
    root: Optional[Dict[str, MethodSetting]] = None


class MapOfMethodSnapshot(RootModel[Optional[Dict[str, MethodSnapshot]]]):
    root: Optional[Dict[str, MethodSnapshot]] = None


class Models(BaseModel):
    items: Optional[ListOfModel] = None
    position: Optional[String] = None


class PathToMapOfMethodSnapshot(RootModel[Optional[Dict[str, MapOfMethodSnapshot]]]):
    root: Optional[Dict[str, MapOfMethodSnapshot]] = None


class RequestValidators(BaseModel):
    items: Optional[ListOfRequestValidator] = None
    position: Optional[String] = None


class RestApi(BaseModel):
    apiKeySource: Optional[ApiKeySourceType] = None
    binaryMediaTypes: Optional[ListOfString] = None
    createdDate: Optional[Timestamp] = None
    description: Optional[String] = None
    disableExecuteApiEndpoint: Optional[Boolean] = None
    endpointConfiguration: Optional[EndpointConfiguration] = None
    id: Optional[String] = None
    minimumCompressionSize: Optional[NullableInteger] = None
    name: Optional[String] = None
    policy: Optional[String] = None
    tags: Optional[MapOfStringToString] = None
    version: Optional[String] = None
    warnings: Optional[ListOfString] = None


class SdkType(BaseModel):
    configurationProperties: Optional[ListOfSdkConfigurationProperty] = None
    description: Optional[String] = None
    friendlyName: Optional[String] = None
    id: Optional[String] = None


class Stage(BaseModel):
    accessLogSettings: Optional[AccessLogSettings] = None
    cacheClusterEnabled: Optional[Boolean] = None
    cacheClusterSize: Optional[CacheClusterSize] = None
    cacheClusterStatus: Optional[CacheClusterStatus] = None
    canarySettings: Optional[CanarySettings2] = None
    clientCertificateId: Optional[String] = None
    createdDate: Optional[Timestamp] = None
    deploymentId: Optional[String] = None
    description: Optional[String] = None
    documentationVersion: Optional[String] = None
    lastUpdatedDate: Optional[Timestamp] = None
    methodSettings: Optional[MapOfMethodSettings] = None
    stageName: Optional[String] = None
    tags: Optional[MapOfStringToString] = None
    tracingEnabled: Optional[Boolean] = None
    variables: Optional[MapOfStringToString] = None
    webAclArn: Optional[String] = None


class UpdateAccountRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateApiKeyRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateAuthorizerRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateBasePathMappingRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateClientCertificateRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateDeploymentRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateDocumentationPartRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateDocumentationVersionRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateDomainNameRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateGatewayResponseRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateIntegrationRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateIntegrationResponseRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateMethodRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateMethodResponseRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateModelRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateRequestValidatorRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateResourceRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateRestApiRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateStageRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateUsagePlanRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateUsageRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UpdateVpcLinkRequest(BaseModel):
    patchOperations: Optional[ListOfPatchOperation] = None


class UsagePlan(BaseModel):
    apiStages: Optional[ListOfApiStage] = None
    description: Optional[String] = None
    id: Optional[String] = None
    name: Optional[String] = None
    productCode: Optional[String] = None
    quota: Optional[QuotaSettings] = None
    tags: Optional[MapOfStringToString] = None
    throttle: Optional[ThrottleSettings] = None


class VpcLinks(BaseModel):
    items: Optional[ListOfVpcLink] = None
    position: Optional[String] = None


class UsageplansPostRequest(BaseModel):
    apiStages: Optional[List[ApiStage]] = Field(
        None, description='The associated API stages of the usage plan.'
    )
    description: Optional[str] = Field(
        None, description='The description of the usage plan.'
    )
    name: str = Field(..., description='The name of the usage plan.')
    quota: Optional[Quota] = Field(
        None, description='Quotas configured for a usage plan.'
    )
    tags: Optional[Dict[str, String]] = Field(
        None,
        description='The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )
    throttle: Optional[Throttle] = Field(
        None, description=' The API request rate limits.'
    )


class ApiKeys(BaseModel):
    items: Optional[ListOfApiKey] = None
    position: Optional[String] = None
    warnings: Optional[ListOfString] = None


class Authorizers(BaseModel):
    items: Optional[ListOfAuthorizer] = None
    position: Optional[String] = None


class ClientCertificates(BaseModel):
    items: Optional[ListOfClientCertificate] = None
    position: Optional[String] = None


class CreateApiKeyRequest(BaseModel):
    customerId: Optional[String] = None
    description: Optional[String] = None
    enabled: Optional[Boolean] = None
    generateDistinctId: Optional[Boolean] = None
    name: Optional[String] = None
    stageKeys: Optional[ListOfStageKeys] = None
    tags: Optional[MapOfStringToString] = None
    value: Optional[String] = None


class CreateDeploymentRequest(BaseModel):
    cacheClusterEnabled: Optional[NullableBoolean] = None
    cacheClusterSize: Optional[CacheClusterSize] = None
    canarySettings: Optional[DeploymentCanarySettings] = None
    description: Optional[String] = None
    stageDescription: Optional[String] = None
    stageName: Optional[String] = None
    tracingEnabled: Optional[NullableBoolean] = None
    variables: Optional[MapOfStringToString] = None


class CreateDomainNameRequest(BaseModel):
    certificateArn: Optional[String] = None
    certificateBody: Optional[String] = None
    certificateChain: Optional[String] = None
    certificateName: Optional[String] = None
    certificatePrivateKey: Optional[String] = None
    domainName: String
    endpointConfiguration: Optional[EndpointConfiguration] = None
    mutualTlsAuthentication: Optional[MutualTlsAuthenticationInput] = None
    ownershipVerificationCertificateArn: Optional[String] = None
    regionalCertificateArn: Optional[String] = None
    regionalCertificateName: Optional[String] = None
    securityPolicy: Optional[SecurityPolicy] = None
    tags: Optional[MapOfStringToString] = None


class CreateRestApiRequest(BaseModel):
    apiKeySource: Optional[ApiKeySourceType] = None
    binaryMediaTypes: Optional[ListOfString] = None
    cloneFrom: Optional[String] = None
    description: Optional[String] = None
    disableExecuteApiEndpoint: Optional[Boolean] = None
    endpointConfiguration: Optional[EndpointConfiguration] = None
    minimumCompressionSize: Optional[NullableInteger] = None
    name: String
    policy: Optional[String] = None
    tags: Optional[MapOfStringToString] = None
    version: Optional[String] = None


class CreateUsagePlanRequest(BaseModel):
    apiStages: Optional[ListOfApiStage] = None
    description: Optional[String] = None
    name: String
    quota: Optional[QuotaSettings] = None
    tags: Optional[MapOfStringToString] = None
    throttle: Optional[ThrottleSettings] = None


class Deployment(BaseModel):
    apiSummary: Optional[PathToMapOfMethodSnapshot] = None
    createdDate: Optional[Timestamp] = None
    description: Optional[String] = None
    id: Optional[String] = None


class DocumentationParts(BaseModel):
    items: Optional[ListOfDocumentationPart] = None
    position: Optional[String] = None


class DomainName(BaseModel):
    certificateArn: Optional[String] = None
    certificateName: Optional[String] = None
    certificateUploadDate: Optional[Timestamp] = None
    distributionDomainName: Optional[String] = None
    distributionHostedZoneId: Optional[String] = None
    domainName: Optional[String] = None
    domainNameStatus: Optional[DomainNameStatus] = None
    domainNameStatusMessage: Optional[String] = None
    endpointConfiguration: Optional[EndpointConfiguration] = None
    mutualTlsAuthentication: Optional[MutualTlsAuthentication] = None
    ownershipVerificationCertificateArn: Optional[String] = None
    regionalCertificateArn: Optional[String] = None
    regionalCertificateName: Optional[String] = None
    regionalDomainName: Optional[String] = None
    regionalHostedZoneId: Optional[String] = None
    securityPolicy: Optional[SecurityPolicy] = None
    tags: Optional[MapOfStringToString] = None


class GatewayResponses(BaseModel):
    items: Optional[ListOfGatewayResponse] = None
    position: Optional[String] = None


class Integration(BaseModel):
    cacheKeyParameters: Optional[ListOfString] = None
    cacheNamespace: Optional[String] = None
    connectionId: Optional[String] = None
    connectionType: Optional[ConnectionType] = None
    contentHandling: Optional[ContentHandlingStrategy] = None
    credentials: Optional[String] = None
    httpMethod: Optional[String] = None
    integrationResponses: Optional[MapOfIntegrationResponse] = None
    passthroughBehavior: Optional[String] = None
    requestParameters: Optional[MapOfStringToString] = None
    requestTemplates: Optional[MapOfStringToString] = None
    timeoutInMillis: Optional[Integer] = None
    tlsConfig: Optional[TlsConfig] = None
    type: Optional[IntegrationType] = None
    uri: Optional[String] = None


class ListOfDeployment(RootModel[List[Deployment]]):
    root: List[Deployment]


class ListOfDomainName(RootModel[List[DomainName]]):
    root: List[DomainName]


class ListOfRestApi(RootModel[List[RestApi]]):
    root: List[RestApi]


class ListOfSdkType(RootModel[List[SdkType]]):
    root: List[SdkType]


class ListOfStage(RootModel[List[Stage]]):
    root: List[Stage]


class ListOfUsagePlan(RootModel[List[UsagePlan]]):
    root: List[UsagePlan]


class Method(BaseModel):
    apiKeyRequired: Optional[NullableBoolean] = None
    authorizationScopes: Optional[ListOfString] = None
    authorizationType: Optional[String] = None
    authorizerId: Optional[String] = None
    httpMethod: Optional[String] = None
    methodIntegration: Optional[Integration] = None
    methodResponses: Optional[MapOfMethodResponse] = None
    operationName: Optional[String] = None
    requestModels: Optional[MapOfStringToString] = None
    requestParameters: Optional[MapOfStringToBoolean] = None
    requestValidatorId: Optional[String] = None


class RestApis(BaseModel):
    items: Optional[ListOfRestApi] = None
    position: Optional[String] = None


class SdkTypes(BaseModel):
    items: Optional[ListOfSdkType] = None
    position: Optional[String] = None


class Stages(BaseModel):
    item: Optional[ListOfStage] = None


class UsagePlans(BaseModel):
    items: Optional[ListOfUsagePlan] = None
    position: Optional[String] = None


class Deployments(BaseModel):
    items: Optional[ListOfDeployment] = None
    position: Optional[String] = None


class DomainNames(BaseModel):
    items: Optional[ListOfDomainName] = None
    position: Optional[String] = None


class MapOfMethod(RootModel[Optional[Dict[str, Method]]]):
    root: Optional[Dict[str, Method]] = None


class Resource(BaseModel):
    id: Optional[String] = None
    parentId: Optional[String] = None
    path: Optional[String] = None
    pathPart: Optional[String] = None
    resourceMethods: Optional[MapOfMethod] = None


class ListOfResource(RootModel[List[Resource]]):
    root: List[Resource]


class Resources(BaseModel):
    items: Optional[ListOfResource] = None
    position: Optional[String] = None
